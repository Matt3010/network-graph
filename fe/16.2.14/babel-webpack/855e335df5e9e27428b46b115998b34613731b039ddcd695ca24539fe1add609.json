{"ast":null,"code":"import { environment } from \"../environments/environment\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./token.service\";\nimport * as i4 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, toastrService, tokenService, router) {\n      this.http = http;\n      this.toastrService = toastrService;\n      this.tokenService = tokenService;\n      this.router = router;\n      this.currentUser$ = new BehaviorSubject(null);\n      this.apiUrl = environment.api_url + '/auth';\n      if (!this.currentUser$.value) {\n        this.me();\n      }\n    }\n    login(body) {\n      this.http.post(this.apiUrl + '/login', body).subscribe(res => {\n        this.handleLoginSuccess(res);\n        this.toastrService.success('Logged in successfully.', 'Success', {\n          positionClass: 'toast-top-left'\n        });\n        console.log(res);\n      }, err => {\n        if (err.status === 422) {\n          this.toastrService.error(err.error.message, 'Error', {\n            positionClass: 'toast-top-left'\n          });\n        } else if (err.status === 401 && !err.error.message) {\n          this.toastrService.error('Invalid credentials...', 'Error', {\n            positionClass: 'toast-top-left'\n          });\n        } else if (err.status === 404) {\n          this.toastrService.error('Email not found! You must register before.', 'Error', {\n            positionClass: 'toast-top-left'\n          });\n        }\n      });\n    }\n    me() {\n      this.http.get(environment.api_url + '/me').subscribe(res => {\n        this.currentUser$.next(res);\n      }, err => {\n        this.logout();\n      });\n    }\n    handleLoginSuccess(res) {\n      this.tokenService.setToken(res.token);\n      this.currentUser$.next(res.user);\n      this.router.navigateByUrl('/pages/notes');\n    }\n    logout() {\n      this.tokenService.removeToken();\n      this.currentUser$.next(null);\n      this.router.navigateByUrl('/auth/login');\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.TokenService), i0.ɵɵinject(i4.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}