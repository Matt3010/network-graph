{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"./token.service\";\nimport * as i4 from \"@angular/router\";\nexport let NoteService = /*#__PURE__*/(() => {\n  class NoteService {\n    constructor(http, toastrService, tokenService, router) {\n      this.http = http;\n      this.toastrService = toastrService;\n      this.tokenService = tokenService;\n      this.router = router;\n      this.myNotes$ = new BehaviorSubject([]);\n      this.notesSearchNotFound$ = new BehaviorSubject(false);\n      this.apiUrl = environment.api_url + '/notes';\n      this.init();\n    }\n    init() {\n      const last = localStorage.getItem('network-last-query-search');\n      if (last) {\n        this.getMyNotes(last);\n      } else {\n        this.getMyNotes('');\n      }\n    }\n    createNewNote() {\n      this.http.get(this.apiUrl).pipe(map(res => res.data)).subscribe(newNote => {\n        this.updateNotes(newNote);\n        this.router.navigateByUrl('/pages/notes/edit/' + newNote.id);\n      });\n    }\n    getMyNotes(query) {\n      this.http.get(this.apiUrl + '/all?q=' + query).pipe(map(res => res.data)).subscribe(notes => {\n        this.notesSearchNotFound$.next(false);\n        this.myNotes$.next(notes);\n      }, err => {\n        if (err.status === 404) {\n          this.notesSearchNotFound$.next(true);\n          this.myNotes$.next([]);\n        }\n      });\n    }\n    saveNote(noteUpdated) {\n      return this.http.patch(this.apiUrl + '/' + noteUpdated.id, noteUpdated).pipe(tap(res => {\n        if (res === 'saved') {\n          const current = this.myNotes$.value;\n          const index = current.findIndex(i => i.id === noteUpdated.id);\n          if (index !== -1) {\n            current[index] = noteUpdated;\n            this.myNotes$.next([...current]);\n          }\n        }\n      }));\n    }\n    find(id) {\n      return this.http.get(this.apiUrl + '/' + id).pipe(map(res => res.data));\n    }\n    updateNotes(note) {\n      const currentNotes = this.myNotes$.value;\n      const newArray = [...currentNotes, note];\n      this.myNotes$.next(newArray);\n    }\n    static #_ = this.ɵfac = function NoteService_Factory(t) {\n      return new (t || NoteService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService), i0.ɵɵinject(i3.TokenService), i0.ɵɵinject(i4.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NoteService,\n      factory: NoteService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NoteService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}